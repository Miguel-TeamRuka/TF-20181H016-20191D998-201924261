# -*- coding: utf-8 -*-
"""MartesPrueba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t_JWcVNHzrBLhOsYXkdF-z08gQmN3-9S
"""

import numpy as np
import random
from numpy import random as rd
from csv import reader
import re
import math as mth
import decimal
import matplotlib.pyplot as plt
!pip install perlin_noise
from perlin_noise import PerlinNoise
from datetime import datetime

from google.colab import files
 
files.upload()

hor=[]
with open('Horizontal.txt', 'r') as my_file:
    file_csv = reader(my_file)
    head = next(file_csv)
    if head is not None:
        for i in file_csv:
            v4,v5,v6,v7=i
            hor.append((v4,int(v5),int(v6),int(v7)))
print(hor)

ver=[]
with open('Vertical.txt', 'r') as my_file:
    file_csv = reader(my_file)
    head = next(file_csv)
    if head is not None:
        for i in file_csv:
            v4,v5,v6,v7=i
            ver.append((v4,int(v5),int(v6),int(v7)))
print(ver)

b=rd.randint(-1,0,(len(hor),len(ver)))
nodeCount=0
nodes=[]
print(b)
for i in range(len(hor)):
  n1,x1,y1,c1=hor[i]
  for j in range(len(ver)):
    n2,x2,y2,c2=ver[j]
    if x2>=x1 and x2<=x1+c1 and y1>=y2 and y1<=y2+c2:
      b[i][j]=nodeCount

      #convertir a coordenadas geograficas
      auxlat=(360*y1/1000)/39942.3024
      lat=41.997248-auxlat #41.997248 es la latitud del punto (0,0)

      paracos=(3.141592/180)*lat
      auxlongit=(360*x2/1000)/(40074.2496*mth.cos(paracos))
      longit=-87.728917+auxlongit #-87.728917 es la longitud del punto (0,0)

      nodes.append((nodeCount,n1,n2,round(lat,6),round(longit,6)))
      nodeCount=nodeCount+1
print(b)
print(" ")
print(nodes)

# Commented out IPython magic to ensure Python compatibility.
# %%file Nodos.txt
# nodos aqui

with open('Nodos.txt', 'w') as f:
   f.write("Nodo,Calle Horizontal,Calle Vertical,Latitud,Longitud"+'\n')
   for count,n in enumerate(nodes):
    if count<len(nodes)-1:
     f.write(str(n[0])+","+n[1]+","+n[2]+","+str(n[3])+","+str(n[4])+'\n')
    else:
      f.write(str(n[0])+","+n[1]+","+n[2]+","+str(n[3])+","+str(n[4]))

myNodos=[]
with open('Nodos.txt', 'r') as my_file:
    file_csv = reader(my_file)
    head = next(file_csv)
    if head is not None:
        for i in file_csv:
            nodo,c1,c2=i
            myNodos.append((int(nodo),c1,c2))
for i in myNodos:
  print(f"El nodo {i[0]} es la interseccion de las calles {i[1]} y {i[2]}")

def Radianes(c):
  return (mth.pi/180)*c

def haversine(lat1,lon1,lat2,lon2):
  dlat=Radianes(lat2)-Radianes(lat1)
  dlon=Radianes(lon2)-Radianes(lon1)
  
  
  a = mth.sin(dlat/2)**2 + mth.cos(Radianes(lat1)) * mth.cos(Radianes(lat2)) * mth.sin(dlon/2)**2
  c = 2 * mth.asin(mth.sqrt(a))
  r = 6371

  return round(c * r, 3)

def distancia(origen,destino):
  nodeO=nodes[origen]
  nodeD=nodes[destino]
  d=haversine(nodeO[3],nodeO[4],nodeD[3],nodeD[4])
  return d



listAd=[]
auxiliar=[]
for i in range(len(hor)):
  for j in range(len(ver)):
    if b[i][j]!=-1:
      if j<len(ver)-1: #final de una fila
        if b[i][j+1]!=-1:
          right=b[i][j+1]
          origin=b[i][j]
          #nodeO=nodes[origin]
          #nodeD=nodes[right]
          #d=haversine(nodeO[3],nodeO[4],nodeD[3],nodeD[4])
          peso=distancia(origin,right)
          auxiliar.append((right,peso))
      if j>0: #inicio de una fila
        if b[i][j-1]!=-1:
          left=b[i][j-1]
          origin=b[i][j]
          #nodeO=nodes[origin]
          #nodeD=nodes[left]
          #d=haversine(nodeO[3],nodeO[4],nodeD[3],nodeD[4])
          peso=distancia(origin,left)
          auxiliar.append((left,peso))
      if i<len(hor)-1: #final de una columna
        if b[i+1][j]!=-1:
          bottom=b[i+1][j]
          origin=b[i][j]
          #nodeO=nodes[origin]
          #nodeD=nodes[bottom]
          #d=haversine(nodeO[3],nodeO[4],nodeD[3],nodeD[4])
          peso=distancia(origin,bottom)
          auxiliar.append((bottom,peso))
      if i>0: #inicio de una columna
        if b[i-1][j]!=-1:
          top=b[i-1][j]
          origin=b[i][j]
          #nodeO=nodes[origin]
          #nodeD=nodes[top]
          #d=haversine(nodeO[3],nodeO[4],nodeD[3],nodeD[4])
          peso=distancia(origin,top)
          auxiliar.append((top,peso))
      listAd.append(auxiliar)
      auxiliar=[]

print(listAd)
for l in listAd:
  print(l)

# Commented out IPython magic to ensure Python compatibility.
# %%file ListaAdyacencia.txt
# lista de adyacencia aqui

c=0
with open('ListaAdyacencia.txt', 'w') as f:
 for i in range(len(listAd)):
   for j in listAd[i]:
     if(c==len(listAd[i])-1):
      #f.write(str(j))
      f.write(re.sub(r'[\(\,)]','',str(j)))
     else:
      #f.write(str(j)+" ")
      f.write(re.sub(r'[\(\,)]','',str(j)+" "))
     c=c+1
   c=0
   if i<len(listAd)-1:
    f.write('\n')